name: CI

env:
  DEBUG: 'napi:*'
  APP_NAME: 'skia'
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
            build: pnpm build
            downloadTarget: ''
          - host: windows-latest
            build: pnpm build
            target: 'x86_64-pc-windows-msvc'
            downloadTarget: ''
          - host: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
            downloadTarget: ''
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull ghcr.io/brooooooklyn/canvas/debian-builder:stretch
              docker tag ghcr.io/brooooooklyn/canvas/debian-builder:stretch builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder npm run build
          - host: ubuntu-latest
            downloadTarget: 'x86_64-unknown-linux-musl'
            target: 'x86_64-unknown-linux-musl'
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull ghcr.io/brooooooklyn/canvas/musl-builder:lts
              docker tag ghcr.io/brooooooklyn/canvas/musl-builder:lts builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder npm run build
          - host: macos-latest
            downloadTarget: 'aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            build: pnpm build -- --target=aarch64-apple-darwin
          - host: ubuntu-18.04
            downloadTarget: 'aarch64-unknown-linux-gnu'
            target: 'aarch64-unknown-linux-gnu'
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu  -y
            build: pnpm build -- --target=aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: 'aarch64-unknown-linux-musl'
            downloadTarget: 'aarch64-unknown-linux-musl'
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull ghcr.io/brooooooklyn/canvas/musl-builder:lts
              docker tag ghcr.io/brooooooklyn/canvas/musl-builder:lts builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder sh -c "rustup toolchain install $(cat ./rust-toolchain) && rustup target add aarch64-unknown-linux-musl && pnpm build -- --target=aarch64-unknown-linux-musl"
          - host: ubuntu-18.04
            target: 'armv7-unknown-linux-gnueabihf'
            downloadTarget: 'armv7-unknown-linux-gnueabihf'
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: pnpm build -- --target=armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: 'aarch64-linux-android'
            downloadTarget: 'aarch64-linux-android'
            build: |
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              pnpm build -- --target aarch64-linux-android

    name: stable - ${{ matrix.settings.target }} - node@14
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Set env
        if: matrix.settings.host == 'windows-latest'
        run: echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_PATH
        shell: bash

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-${{ matrix.settings.target }}-node@14-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}

      - name: Download skia binary
        run: node ./scripts/release-skia-binary.js --download --target=${{ matrix.settings.downloadTarget }}

      - name: 'Build'
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
          - host: windows-latest
            target: 'x86_64-pc-windows-msvc'
        node: ['12', '14', '16']
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-test-${{ matrix.settings.target }}-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: Download icudtl.dat
        if: matrix.settings.host == 'windows-latest'
        run: node ./scripts/release-skia-binary.js --download-icu

      - name: Test bindings
        run: pnpm test

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-${{ matrix.settings.target }}-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-test-linux-x64-gnu-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v ~/.pnpm-store:/root/.pnpm-store -v $(pwd):/canvas -w /canvas node:${{ matrix.node }}-slim sh -c "npm install -g pnpm && pnpm install --ignore-scripts && pnpm test"

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-x86_64-unknown-linux-gnu-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-test-linux-x64-gnu-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v ~/.pnpm-store:/root/.pnpm-store -v $(pwd):/canvas -w /canvas node:${{ matrix.node }}-alpine sh -c "npm install -g pnpm && pnpm install --ignore-scripts && pnpm test"

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-x86_64-unknown-linux-musl-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: docker://multiarch/ubuntu-core:arm64-focal
        with:
          args: >
            sh -c "
              apt-get update && \
              apt-get install -y ca-certificates gnupg2 curl apt-transport-https && \
              curl -sL https://deb.nodesource.com/setup_${{ matrix.node }}.x | bash - && \
              apt-get install -y nodejs && \
              npm install -g pnpm && \
              pnpm install --ignore-scripts && \
              npm test && \
              ls -la
            "

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-aarch64-unknown-linux-gnu-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build

    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: docker://multiarch/alpine:aarch64-latest-stable
        with:
          args: >
            sh -c "
              apk add nodejs npm && \
              npm install -g pnpm && \
              pnpm install --ignore-scripts && \
              npm test
            "

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-aarch64-unknown-linux-musl-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: docker://multiarch/ubuntu-core:armhf-focal
        with:
          args: >
            sh -c "
              apt-get update && \
              apt-get install -y ca-certificates gnupg2 curl apt-transport-https && \
              curl -sL https://deb.nodesource.com/setup_${{ matrix.node }}.x | bash - && \
              apt-get install -y nodejs && \
              npm install -g pnpm && \
              pnpm install --ignore-scripts && \
              npm test && \
              ls -la
            "

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failure-images-armv7-unknown-linux-gnueabihf-${{ matrix.node }}
          path: __test__/failure/**

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - test-macOS-windows-binding

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-test-linux-x64-gnu-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move artifacts
        run: pnpm artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
